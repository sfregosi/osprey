function y = mainSet(cmd, name, clickTF, selTF, gramletTF, gramlet, params)
%mainSet	the principal set of Osprey measures
%   This implements the large set of measures that have been part of Osprey for
%   a long time.
%
%   See README.txt in this directory for the calling convention and args.

global opLastLoc opLastLocError

switch(cmd)
case 'init'
  y = struct(...
      'longName',{'file length' 'sample rate'	'time'		 'frequency'...
      		'amplitude'	'sample number' 'start time'	 'end time'...
		'duration'	'low frequency'	'high frequency' 'bandwidth'...
		'energy'	'power'		'peak frequency' 'peak time'...
		'peak amplitude' 'number of datalog entries' 'channel number'...
		'x location'	'y location'	'z location' ...
                'location error' }, ...
      'screenName',{'file length' 'sample rate'	'time'		'frequency' ...
		'amplitude'	'sample #'	'start time'	'end time'  ...
		'duration'	'low freq'	'high freq'	'bandwidth' ...
		'energy'	'power'		'peak freq'	'peak time' ...
		'peak amp'	'# datalogs'			'channel #' ...
                'x loc'		'y loc'		'z loc'	...	
                'loc error' }, ...
      'unit', {	's'		'Hz'		's'		'Hz' ...
      		'dB'		'',		's'		's'  ...
		's'		'Hz'		'Hz'		'Hz' ...
		'dB'		'dB'		'Hz'		's'  ...
		'dB'		''				'' ...
                'm'		'm'		'm' ...
                '' }, ...
      'type', {	'simple'	'simple'	'point' 	'point' ...
      		'point' 	'point' 	'selection'	'selection' ...
		'selection'	'selection'	'selection'	'selection' ...
		'gramlet'	'gramlet'	'gramlet'	'gramlet' ...
		'gramlet'	'simple'			'simple' ...
                'selection'	'selection'	'selection' ...
                'selection' }, ...
      'needSel', num2cell([0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1]), ...
      'needGram',num2cell([0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0]), ...
      'fixTime', num2cell([0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]), ...
      'enabled', num2cell([0 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]), ...
      'sortIndex',num2cell(1 : 23) );

case 'measure'
  bx = gramletTF;
  lc = clickTF;
  amp = 20 / log(10);
  sel = selTF;

  switch(name)
  case 'file length'
    v = params.totalSamples / params.sRate;
  case 'sample rate'
    v = params.sRate;
  case 'time'
    v = lc(1);
  case 'frequency'
    v = lc(2);
  case 'amplitude'
    v = amp * opGetSpect(params.channel, lc(1),lc(1),lc(2),lc(2));
    if (isempty(v)), v = 0; end
  case 'sample number'
    v = round(lc(1) * params.sRate);
  case 'start time'
    v = sel(1);
  case 'end time'
    v = sel(3);
  case 'duration'
    v = abs(sel(3)-sel(1));
  case 'low frequency'
    v = sel(2);
  case 'high frequency'
    v = sel(4);
  case 'bandwidth'
    v = abs(sel(4) - sel(2));
  case { 'energy' 'power' }
    d = iff(strcmp(name, 'Energy'), 1, nCols(gramlet) / params.frameRate);
    v = amp/2 * log(sum(sum(exp(gramlet).^2)) / d * params.hopSize ...
						    / (1 + params.zeroPad));
  case 'peak frequency'
    [~,v] = max(gramlet(:));
    nr = nRows(gramlet);
    v = (rem(v-1,nr)       + 0.5) / nr * (bx(4)-bx(2)) + bx(2); 
  case 'peak time'
    [~,v] = max(gramlet(:));
    [nr,nc] = size(gramlet);
    v = (floor((v-1) / nr) + 0.5) / nc * (bx(3)-bx(1)) + bx(1);
  case 'peak amplitude'
    v = amp * max(max(gramlet));
  case 'number of datalog entries'
    v = params.nlogs;
  case 'channel number'
    v = params.channel;
  case 'x location'
    if (length(opLastLoc) >= 1), v = opLastLoc(1); else v = 0; end
  case 'y location'
    if (length(opLastLoc) >= 2), v = opLastLoc(2); else v = 0; end
  case 'z location'
    if (length(opLastLoc) >= 3), v = opLastLoc(3); else v = 0;  end
  case 'location error'
    if (~isempty(opLastLocError)), v = opLastLocError; else v = 0; end

  end	% name switch
  y = v;
end	% main switch
